
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import Jama.*;
import java.util.Arrays;

import java.util.LinkedHashMap;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


/*
 * PR_GUI.java
 *
 * Created on 2016-10-19, 19:40:56
 */


/**
 *
 * @author DSJ
 */

public class PR_GUI extends javax.swing.JFrame {

    String InData; // dataset from a text file will be placed here
    int ClassCount=0, FeatureCount=0;
    double[][] F, FNew; // original feature matrix and reduced feature matrix FNew
    int[] ClassLabels, SampleCount;
    String[] ClassNames;
    ArrayList selboxItems = new ArrayList<String>();
    boolean isRead = false, isTrained=false, isParsed = false;
    private Fisher fisher;
   
    
    
    
    /** Creates new form PR_GUI */
    public PR_GUI() {
        
        selboxItems.add(Integer.toString(1));

        initComponents();
        selbox_nfeat1.setSelectedItem(1);
        selbox_nfeat1.setEnabled(false);
        selbox_kSamples.setSelectedItem(1);
        selbox_kSamples.setEnabled(false);
        selbox_kSamples1.setSelectedItem(1);
        selbox_kSamples1.setEnabled(false);
        kLoops.setText("1");
        kSections.setText("1");
        setSize(720,410);
        printAreaClassifier.setEditable(false);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbg_F = new javax.swing.ButtonGroup();
        advancedClassification = new javax.swing.ButtonGroup();
        b_read = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        l_dataset_name_l = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        l_dataset_name = new javax.swing.JLabel();
        l_nfeatures = new javax.swing.JLabel();
        classCount = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        b_deriveFS = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        selbox_nfeat1 = new javax.swing.JComboBox();
        FSalgorithm = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        selectClassMeth = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        tf_TrainSetSize = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        classifClasses = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        classifierAccur = new javax.swing.JLabel();
        selbox_kSamples = new javax.swing.JComboBox();
        jScrollPaneClassifier = new javax.swing.JScrollPane();
        printAreaClassifier = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        b_Train = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        l_FLD_val = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        printAreaClassifierAdv = new javax.swing.JTextArea();
        selectClassMethAdv = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bootStrapButton = new javax.swing.JRadioButton();
        crossValidationButton = new javax.swing.JRadioButton();
        jLabel23 = new javax.swing.JLabel();
        classifierAccur1 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        kLoops = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        kSections = new javax.swing.JTextField();
        executeAdvanced = new javax.swing.JButton();
        trainAdvanced = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        selbox_kSamples1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 100, 100));
        setMinimumSize(new java.awt.Dimension(940, 430));
        setPreferredSize(new java.awt.Dimension(300, 300));
        setSize(new java.awt.Dimension(1000, 1000));
        getContentPane().setLayout(null);

        b_read.setText("Read dataset");
        b_read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_readActionPerformed(evt);
            }
        });
        getContentPane().add(b_read);
        b_read.setBounds(20, 10, 130, 23);

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setText("Dataset info");

        l_dataset_name_l.setText("Name:");

        jLabel3.setText("Classes:");

        jLabel4.setText("Features:");

        l_dataset_name.setText("...");

        l_nfeatures.setText("...");

        classCount.setText("...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(l_dataset_name_l)
                        .addGap(18, 18, 18)
                        .addComponent(l_dataset_name))
                    .addComponent(jLabel1))
                .addGap(67, 67, 67)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classCount)
                    .addComponent(l_nfeatures))
                .addGap(127, 127, 127))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(classCount))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_dataset_name_l)
                    .addComponent(jLabel4)
                    .addComponent(l_dataset_name)
                    .addComponent(l_nfeatures))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 50, 300, 80);

        jButton2.setText("Parse dataset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(160, 10, 130, 23);

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel5.setText("Feature selection");
        jPanel3.add(jLabel5);
        jLabel5.setBounds(14, 2, 144, 26);

        jLabel6.setText("FS Dimension:");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(20, 130, 67, 14);

        b_deriveFS.setText("Derive Feature Space");
        b_deriveFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_deriveFSActionPerformed(evt);
            }
        });
        jPanel3.add(b_deriveFS);
        b_deriveFS.setBounds(10, 200, 150, 23);

        jLabel7.setText("Method:");
        jPanel3.add(jLabel7);
        jLabel7.setBounds(20, 50, 70, 14);

        selbox_nfeat1.setModel(new DefaultComboBoxModel(selboxItems.toArray()));
        selbox_nfeat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selbox_nfeat1ActionPerformed(evt);
            }
        });
        jPanel3.add(selbox_nfeat1);
        selbox_nfeat1.setBounds(10, 160, 50, 20);

        FSalgorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SFS", "BruteForce" }));
        FSalgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSalgorithmActionPerformed(evt);
            }
        });
        jPanel3.add(FSalgorithm);
        FSalgorithm.setBounds(10, 90, 130, 20);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(10, 140, 170, 240);

        jPanel4.setBackground(new java.awt.Color(204, 255, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        selectClassMeth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" }));
        selectClassMeth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectClassMethItemStateChanged(evt);
            }
        });
        selectClassMeth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectClassMethActionPerformed(evt);
            }
        });
        jPanel4.add(selectClassMeth);
        selectClassMeth.setBounds(130, 40, 140, 20);

        jLabel16.setText("Training part:");
        jPanel4.add(jLabel16);
        jLabel16.setBounds(10, 130, 80, 14);

        tf_TrainSetSize.setText("80");
        tf_TrainSetSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_TrainSetSizeActionPerformed(evt);
            }
        });
        jPanel4.add(tf_TrainSetSize);
        tf_TrainSetSize.setBounds(90, 130, 20, 20);

        jLabel11.setText("Classified classes (testSample):");
        jPanel4.add(jLabel11);
        jLabel11.setBounds(10, 180, 190, 14);

        classifClasses.setText("\"");
        jPanel4.add(classifClasses);
        classifClasses.setBounds(210, 170, 60, 30);

        jLabel19.setText("Accuracy of classification:");
        jPanel4.add(jLabel19);
        jLabel19.setBounds(10, 210, 170, 14);

        classifierAccur.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        classifierAccur.setText("0");
        jPanel4.add(classifierAccur);
        classifierAccur.setBounds(210, 210, 30, 14);

        selbox_kSamples.setModel(new DefaultComboBoxModel(selboxItems.toArray()));
        selbox_kSamples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selbox_kSamplesActionPerformed(evt);
            }
        });
        jPanel4.add(selbox_kSamples);
        selbox_kSamples.setBounds(150, 70, 50, 20);

        printAreaClassifier.setColumns(20);
        printAreaClassifier.setRows(5);
        jScrollPaneClassifier.setViewportView(printAreaClassifier);

        jPanel4.add(jScrollPaneClassifier);
        jScrollPaneClassifier.setBounds(10, 230, 260, 130);

        jLabel20.setText("Method:");
        jPanel4.add(jLabel20);
        jLabel20.setBounds(10, 40, 50, 14);

        jLabel22.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel22.setText("Classifier");
        jPanel4.add(jLabel22);
        jLabel22.setBounds(20, 0, 79, 26);

        jLabel24.setText("%");
        jPanel4.add(jLabel24);
        jLabel24.setBounds(240, 210, 20, 14);

        jLabel25.setText("Number of samples (k)");
        jPanel4.add(jLabel25);
        jLabel25.setBounds(10, 70, 140, 14);

        jLabel27.setText("%");
        jPanel4.add(jLabel27);
        jLabel27.setBounds(120, 130, 20, 14);

        b_Train.setText("Train");
        b_Train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_TrainActionPerformed(evt);
            }
        });
        jPanel4.add(b_Train);
        b_Train.setBounds(20, 100, 98, 20);

        jButton4.setText("Execute");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionTaken(evt);
            }
        });
        jPanel4.add(jButton4);
        jButton4.setBounds(170, 100, 100, 23);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(320, 10, 280, 370);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        jPanel5.setLayout(null);

        jLabel2.setText("FS Winner:");
        jPanel5.add(jLabel2);
        jLabel2.setBounds(10, 20, 70, 14);

        jLabel13.setText("FLD value: ");
        jPanel5.add(jLabel13);
        jLabel13.setBounds(10, 210, 130, 14);

        l_FLD_val.setText("vvv");
        jPanel5.add(l_FLD_val);
        l_FLD_val.setBounds(70, 210, 70, 14);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel5.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 110, 150);

        getContentPane().add(jPanel5);
        jPanel5.setBounds(180, 140, 130, 240);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        printAreaClassifierAdv.setColumns(20);
        printAreaClassifierAdv.setRows(5);
        jScrollPane2.setViewportView(printAreaClassifierAdv);

        selectClassMethAdv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" }));
        selectClassMethAdv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectClassMethAdvItemStateChanged(evt);
            }
        });
        selectClassMethAdv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectClassMethAdv(evt);
            }
        });

        jLabel9.setText("Method:");

        jLabel8.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel8.setText("Advanced Classification");

        bootStrapButton.setBackground(new java.awt.Color(255, 204, 255));
        advancedClassification.add(bootStrapButton);
        bootStrapButton.setText("Bootstrap");
        bootStrapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bootStrapButtonActionPerformed(evt);
            }
        });

        crossValidationButton.setBackground(new java.awt.Color(255, 204, 255));
        advancedClassification.add(crossValidationButton);
        crossValidationButton.setText("Cross-Validation");
        crossValidationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crossValidationButtonActionPerformed(evt);
            }
        });

        jLabel23.setText("Accuracy of classification:");

        classifierAccur1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        classifierAccur1.setText("0");

        jLabel21.setText("%");

        jLabel18.setText("Number of sections:");

        jLabel26.setText("Number of loops:");

        kLoops.setEnabled(false);
        kLoops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kLoopsActionPerformed(evt);
            }
        });

        jLabel17.setText("k:");

        jLabel28.setText("k:");

        kSections.setEnabled(false);
        kSections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kSectionsActionPerformed(evt);
            }
        });

        executeAdvanced.setText("Execute");
        executeAdvanced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeAdvancedActionPerformed(evt);
            }
        });

        trainAdvanced.setText("Train");
        trainAdvanced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainAdvancedActionPerformed(evt);
            }
        });

        jLabel29.setText("Number of samples (k)");

        selbox_kSamples1.setModel(new DefaultComboBoxModel(selboxItems.toArray()));
        selbox_kSamples1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selbox_kSamples1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bootStrapButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(crossValidationButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(kLoops, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(kSections, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)))))
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selbox_kSamples1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectClassMethAdv, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(trainAdvanced, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(executeAdvanced, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(72, 72, 72))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classifierAccur1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bootStrapButton)
                    .addComponent(crossValidationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(kLoops, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(kSections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(selectClassMethAdv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(selbox_kSamples1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainAdvanced)
                    .addComponent(executeAdvanced))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(classifierAccur1)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(610, 10, 310, 370);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void f_rb_selActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f_rb_selActionPerformed
   
    }//GEN-LAST:event_f_rb_selActionPerformed

    private void f_rb_extrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f_rb_extrActionPerformed
     
    }//GEN-LAST:event_f_rb_extrActionPerformed

    private void b_readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_readActionPerformed
        // reads in a text file; contents is placed into a variable of String type
        InData = readDataSet();
        if (!InData.equals(""))isRead=true;
    }//GEN-LAST:event_b_readActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Analyze text inputted from a file: determine class number and labels and number
        // of features; build feature matrix: columns - samples, rows - features
        try {
            if(InData!=null) {
                getDatasetParameters();
                l_nfeatures.setText(FeatureCount+"");
                
                fillFeatureMatrix();
                isParsed=true;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        classifClasses.setText("'");
        selbox_nfeat1.setEnabled(true);
        initializeSelboxItems();
        
    }//GEN-LAST:event_jButton2ActionPerformed
private void kLoopsActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }
    private void b_deriveFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_deriveFSActionPerformed
        // derive optimal feature space
        if(F==null) return;
        else{
            // the chosen strategy is feature selection
            int[] flags = new int[FeatureCount];
            fisher = new Fisher(this);
        }
     
    }//GEN-LAST:event_b_deriveFSActionPerformed
private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }//
    private void tf_PCA_EnergyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_PCA_EnergyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_PCA_EnergyActionPerformed

    private void selbox_nfeat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selbox_nfeat1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selbox_nfeat1ActionPerformed

    private void FSalgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FSalgorithmActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_FSalgorithmActionPerformed
 private void crossValidationButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        kLoops.setEnabled(false);
        kSections.setEnabled(true);
    }
    private void tf_TrainSetSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_TrainSetSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_TrainSetSizeActionPerformed

    private void selectClassMethActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectClassMethActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectClassMethActionPerformed

    private void selbox_kSamplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selbox_kSamplesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selbox_kSamplesActionPerformed

    private void selectClassMethItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectClassMethItemStateChanged
        if(selectClassMeth.getSelectedItem().equals("k-Nearest Mean (k-NM)") ||
                selectClassMeth.getSelectedItem().equals("k-Nearest Neighbor (k-NN)")){
            selbox_kSamples.setEnabled(true);
        } else if(selectClassMeth.getSelectedItem().equals("Nearest neighbor(NN)") ||
                selectClassMeth.getSelectedItem().equals("Nearest Mean (NM)")){
            selbox_kSamples.setEnabled(false);
        }
    }//GEN-LAST:event_selectClassMethItemStateChanged

    private void executeActionTaken(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionTaken
       if ( selectClassMeth.getSelectedItem().equals("k-Nearest Mean (k-NM)")){
           System.out.println("done perfectly");
        }
        if(isTrained){
           if ( selectClassMeth.getSelectedItem().equals("Nearest neighbor (NN)")){
                NNClassifier CNN = new NNClassifier(this);
                CNN.classifySamples();
            } else if(selectClassMeth.getSelectedItem().equals("Nearest Mean (NM)")){
                NMClassifier CNM = new NMClassifier(this);
                CNM.classifySamples();
            }else if(selectClassMeth.getSelectedItem().equals("k-Nearest Neighbor (k-NN)")){
                kNNClassifier CkNN = new kNNClassifier(this);
                CkNN.classifySamples();
            }else if(selectClassMeth.getSelectedItem().equals("k-Nearest Mean (k-NM)")){
                kNMClassifier CkNM = new kNMClassifier(this);
                CkNM.classifySamples();
            }
        
        } else printAreaClassifier.setText ("You need to train Classifier first!");
                                         

    }//GEN-LAST:event_executeActionTaken

    private void executeAdvancedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeAdvancedActionPerformed
      if(isTrained){
         if(bootStrapButton.isSelected()){
           bootstrap BS = new bootstrap (this, 1);
         } else if(crossValidationButton.isSelected()){
          Cross_Validation crossValidation = new Cross_Validation(this, 1,1);
         }    
      } else printAreaClassifierAdv.setText ("You need to train Classifier first!");
        
        
        
    }//GEN-LAST:event_executeAdvancedActionPerformed

    private void b_TrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_TrainActionPerformed

        // first step: split dataset (in new feature space) into training / testing parts
        if(isRead && isParsed){
            dataTrainer DT = new dataTrainer(this,1);

            if(FNew==null){     // if no reduced feature space have been derived
                DT.generateTraining_and_Test_Flags(F, tf_TrainSetSize.getText());
            }   else{
                DT.generateTraining_and_Test_Flags(FNew, tf_TrainSetSize.getText());
            }
            isTrained=true;
            printAreaClassifier.setText ("Data trained");
        }else if(!isRead){
            printAreaClassifier.setText ("You need to read data set first!");
        }else if(!isParsed){
            printAreaClassifier.setText ("You need to parse data set first!");
        }

    }//GEN-LAST:event_b_TrainActionPerformed

    private void trainAdvancedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainAdvancedActionPerformed
        
        if(isRead && isParsed){
            if(bootStrapButton.isSelected()){
                if(getKLoops()>0 && getKLoops() < 10000){
                    bootstrap BS = new bootstrap (this);
                    printAreaClassifierAdv.setText ("Data trained");
                    isTrained=true;  
                } else printAreaClassifierAdv.setText ("Insert proper number of loops");
                              
            } else if (crossValidationButton.isSelected()){
                
                
                          int kSectionsNumber = Integer.parseInt(kSections.getText());
            Cross_Validation crossValidation = new Cross_Validation(this, kSectionsNumber);
                
                
                
                
                printAreaClassifierAdv.setText ("Data trained");
                isTrained=true;
            } else printAreaClassifierAdv.setText ("Check the desired classification method bootstrap/crossvalidation");      
        }else if(!isRead){
            printAreaClassifierAdv.setText ("You need to read data set first!");
        }else if(!isParsed){
            printAreaClassifierAdv.setText ("You need to parse data set first!");
        }
    }//GEN-LAST:event_trainAdvancedActionPerformed

    private void selbox_kSamples1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selbox_kSamples1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selbox_kSamples1ActionPerformed

    private void selectClassMethAdvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectClassMethAdvItemStateChanged
       if(selectClassMethAdv.getSelectedItem().equals("k-Nearest Mean (k-NM)") ||
                selectClassMethAdv.getSelectedItem().equals("k-Nearest Neighbor (k-NN)")){
            selbox_kSamples1.setEnabled(true);
        } else if(selectClassMethAdv.getSelectedItem().equals("Nearest neighbor(NN)") ||
                selectClassMethAdv.getSelectedItem().equals("Nearest Mean (NM)")){
            selbox_kSamples1.setEnabled(false);
        }
    }//GEN-LAST:event_selectClassMethAdvItemStateChanged

    private void selectClassMethAdv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectClassMethAdv
        // TODO add your handling code here:
    }//GEN-LAST:event_selectClassMethAdv
 private void kSectionsActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }
    
    private void bootStrapButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        kLoops.setEnabled(true);
        kSections.setEnabled(false);
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PR_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FSalgorithm;
    private javax.swing.ButtonGroup advancedClassification;
    private javax.swing.JButton b_Train;
    private javax.swing.JButton b_deriveFS;
    private javax.swing.JButton b_read;
    private javax.swing.JRadioButton bootStrapButton;
    private javax.swing.JLabel classCount;
    private javax.swing.JLabel classifClasses;
    private javax.swing.JLabel classifierAccur;
    private javax.swing.JLabel classifierAccur1;
    private javax.swing.JRadioButton crossValidationButton;
    private javax.swing.JButton executeAdvanced;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneClassifier;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField kLoops;
    private javax.swing.JTextField kSections;
    public javax.swing.JLabel l_FLD_val;
    private javax.swing.JLabel l_dataset_name;
    private javax.swing.JLabel l_dataset_name_l;
    private javax.swing.JLabel l_nfeatures;
    private javax.swing.JTextArea printAreaClassifier;
    private javax.swing.JTextArea printAreaClassifierAdv;
    private javax.swing.ButtonGroup rbg_F;
    private javax.swing.JComboBox selbox_kSamples;
    private javax.swing.JComboBox selbox_kSamples1;
    private javax.swing.JComboBox selbox_nfeat1;
    private javax.swing.JComboBox selectClassMeth;
    private javax.swing.JComboBox<String> selectClassMethAdv;
    private javax.swing.JTextField tf_TrainSetSize;
    private javax.swing.JButton trainAdvanced;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @return 
     */
    private String readDataSet() {

        String s_tmp, s_out="";
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File(".."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                                            "Datasets - plain text files", "txt");
        jfc.setFileFilter(filter);
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(jfc.getSelectedFile()));
                while((s_tmp=br.readLine())!=null) s_out += s_tmp + '$';
                br.close();
                l_dataset_name.setText(jfc.getSelectedFile().getName());
            } catch (Exception e) {        }
        }
        return s_out;
    }

    /**
     * 
     * @throws Exception 
     */
    private void getDatasetParameters() throws Exception{
        // based on data stored in InData determine: class count and names, number of samples 
        // and number of features; set the corresponding variables
        String stmp=InData, saux="";
        // analyze the first line and get feature count: assume that number of features
        // equals number of commas
        saux = InData.substring(InData.indexOf(',')+1, InData.indexOf('$'));
        if(saux.length()==0) throw new Exception("The first line is empty");
        // saux stores the first line beginning from the first comma
        int count=0;
        while(saux.indexOf(',') >0){
            saux = saux.substring(saux.indexOf(',')+1);            
            count++;
        }
        FeatureCount = count+1; // the first parameter
        // Determine number of classes, class names and number of samples per class
        boolean New;
        int index=-1;
        List<String> NameList = new ArrayList<String>();
        List<Integer> CountList = new ArrayList<Integer>();
        List<Integer> LabelList = new ArrayList<Integer>();
        while(stmp.length()>1){
            saux = stmp.substring(0,stmp.indexOf(' '));
            New = true; 
            index++; // new class index
            for(int i=0; i<NameList.size();i++) 
                if(saux.equals(NameList.get(i))) {
                    New=false;
                    index = i; // class index
                }
            if(New) {
                NameList.add(saux);
                CountList.add(0);
            }
            else{
                CountList.set(index, CountList.get(index).intValue()+1);
            }           
            LabelList.add(index); // class index for current row
            stmp = stmp.substring(stmp.indexOf('$')+1);
        }
        // based on results of the above analysis, create variables
        ClassNames = new String[NameList.size()];
        for(int i=0; i<ClassNames.length; i++)
            ClassNames[i]=NameList.get(i);
        SampleCount = new int[CountList.size()];
        for(int i=0; i<SampleCount.length; i++)
            SampleCount[i] = CountList.get(i).intValue()+1;
        ClassLabels = new int[LabelList.size()];
        for(int i=0; i<ClassLabels.length; i++)
            ClassLabels[i] = LabelList.get(i).intValue(); //sets the label for the class
    classCount.setText(Integer.toString(ClassCount = ClassNames.length));
    }

    /**
     * 
     * @throws Exception 
     */
    private void fillFeatureMatrix() throws Exception {
        // having determined array size and class labels, fills in the feature matrix
        int n = 0;
        String saux, stmp = InData;
        for(int i=0; i<SampleCount.length; i++)
            n += SampleCount[i];
        if(n<=0) throw new Exception("no samples found");
        F = new double[FeatureCount][n]; // samples are placed column-wise
        for(int j=0; j<n; j++){
            saux = stmp.substring(0,stmp.indexOf('$'));
            saux = saux.substring(stmp.indexOf(',')+1);
            for(int i=0; i<FeatureCount-1; i++) {
                F[i][j] = Double.parseDouble(saux.substring(0,saux.indexOf(',')));
                saux = saux.substring(saux.indexOf(',')+1);
            }
            F[FeatureCount-1][j] = Double.parseDouble(saux);
            stmp = stmp.substring(stmp.indexOf('$')+1);
        }
        int cc = 1;
    }
      public double[][] getF() {
      //System.out.println(F[1][1]); 
      return F;
  }
 
        public double[][] getFNew(){
      return FNew;
  }    
   public void setFNew(double[][] f) {
      FNew = f;
  }
        
        
  public int getFeatureCount() {
      return FeatureCount;
  }

 public void setFeatureCount(int f) {
      FeatureCount = f;
  }


public int[] getClassLabels() {
      return ClassLabels;
  }



public void setClassifyClasses(String setter){
    classifClasses.setText(setter);
}
public void addClassifyClasses(String setter){
    classifClasses.setText(classifClasses.getText()+setter);
}

public void addClassifyLine(String setter){
    printAreaClassifier.setText(printAreaClassifier.getText()+"\n"+setter);
    //printAreaClassifier.append("\n"+setter);
}
public void clearClassifier(){
    printAreaClassifier.setText("");
    classifClasses.setText("'");
    classifierAccur.setText("0");
}

public void setClassifierAcc(String setter){
    classifierAccur.setText(setter);
    System.out.println(setter);
}
public int getClassCount(){
    
    return Integer.parseInt(classCount.getText());
    }

public boolean getIsRead(){
    
    return isRead;
}

public boolean getIsParsed(){
    
    return isParsed;
    }
/**
 * 
 * @return sample count for all classes
 */
public int getSamplesCount(){
    
    return F[0].length;
    }

public String getSelectionSelectClassMeth(){
    return selectClassMeth.getSelectedItem().toString();
}

public String getSelectionSelectClassMethAdv(){
    return selectClassMethAdv.getSelectedItem().toString();
}

public int getKSamplesCount(){
    if (abstractClassifier.K_TrainOrTestSet==null){
       return Integer.parseInt(selbox_kSamples.getSelectedItem().toString()); 
    }
        return Integer.parseInt(selbox_kSamples1.getSelectedItem().toString());
}

public double getClassifierAccur(){
    return Double.valueOf(classifierAccur.getText());
}

public double getClassifierAccur1(){
    return Double.valueOf(classifierAccur.getText());
}

public void clearClassifierAccur(){
    classifierAccur.setText("0");
}

public void setClassifierAccur1(double accuracy){
    classifierAccur1.setText(Double.toString(accuracy));
}

public int getKLoops(){
    return Integer.parseInt(kLoops.getText().toString());
}
public int getKSecs(){
    return Integer.parseInt(kSections.getText().toString());
}

private void initializeSelboxItems(){
    
    initializeOneSelboxItem((DefaultComboBoxModel)selbox_nfeat1.getModel(), getFeatureCount()-1); //selecting the same amount of features makes no sense
    initializeOneSelboxItem((DefaultComboBoxModel)selbox_kSamples.getModel(), getSamplesCount()/getClassCount()); 
    initializeOneSelboxItem((DefaultComboBoxModel)selbox_kSamples1.getModel(), getSamplesCount()/getClassCount());
}

private void initializeOneSelboxItem(DefaultComboBoxModel JComboBox, int nSelection){
    DefaultComboBoxModel model = (DefaultComboBoxModel) JComboBox;
    model.removeAllElements();
    for (int i=1;i<=nSelection;i++){          
            model.addElement(Integer.toString(i));
        }
}

public javax.swing.JComboBox<String> getFSalgorithm() {
        return FSalgorithm;
    }

public javax.swing.JLabel getl_FLD_val() {
        return l_FLD_val;
    }
    
    public javax.swing.JTextArea getjTextArea1()
    {
        return  jTextArea1;
    }
    
      public int[] getSampleCount() {
        return SampleCount;
    }
      
    public javax.swing.JComboBox getSelbox_nfeat1() {
        return selbox_nfeat1;
    }

}
